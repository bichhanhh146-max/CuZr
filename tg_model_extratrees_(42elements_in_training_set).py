# -*- coding: utf-8 -*-
"""Tg_Model_Extratrees_(42elements_in_training_set).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YjxzYfQIlWApXClkoIWfU3yEUkswC3mT
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.mixture import GaussianMixture
import matplotlib.pyplot as plt
import seaborn as sns

data0 = pd.read_csv("output_alloy_ScientifcReports(2023)12_11754.csv")
data1 = pd.read_csv("Tg_(1)_Fragility crossover mediated by covalent-like electronic interactions in metallic liquids.csv")
data2 = pd.read_csv("Tg_(2)_Separating the Role of Mixing-Entropy on the Dynamics of Glass-Forming Liquids.csv")
data3 = pd.read_csv("Tg_42_elements.csv")
data0.head()

features = ['Fe', 'Ni', 'Co', 'Cr', 'Hf', 'Sn', 'Zr', 'Ce', 'In',
       'Ga', 'Gd', 'Si', 'Zn', 'Bi', 'Ti', 'Mo', 'W', 'P', 'Pd', 'Ta', 'V',
       'Nb', 'Sc', 'Al', 'Cu', 'La', 'Mg', 'Tb', 'Y', 'Be', 'Pr', 'Er', 'Tm',
       'Nd', 'B', 'Au', 'Ho', 'Ca', 'Dy', 'Mn', 'Ag', 'C']
a0 = data0[features].values
a1 = data1[features].values
a2 = data2[features].values
a3 = data3[features].values
a = np.vstack((a0, a1, a2))
np.shape(a), a

result  = ['Tg']
b0 = data0[result].values
b1 = data1[result].values
b2 = data2[result].values
b3 = data3[result].values

b = np.vstack((b0, b1, b2))
np.shape(b), b

"""### Spliting dataset"""

from sklearn.model_selection import train_test_split
a_train, a_valid, b_train, b_valid = train_test_split(a, b, test_size=0.2, random_state = 11)

#Add data of 42 elements to a_train, b_train
a_train = np.vstack((a, a3))
b_train = np.vstack((b, b3))

b_train = np.ravel(b_train)
b_valid = np.ravel(b_valid)

a_train.shape

"""### 1.ExtraTreesRegressor"""

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import ExtraTreesRegressor
# Khởi tạo mô hình
et_model = ExtraTreesRegressor(random_state=2)

# Định nghĩa grid tham số cần tìm
param_grid = {
    "random_state": range(1, 10, 1),
    "n_estimators": range(10, 101, 10),  # Số lượng cây trong rừng
}

# Sử dụng GridSearchCV
grid_search = GridSearchCV(
    estimator=et_model,
    param_grid=param_grid,
    scoring="neg_mean_squared_error",  # Sử dụng MSE làm tiêu chí đánh giá
    cv=5,  # Số lượng fold trong cross-validation
    n_jobs=-1,  # Sử dụng tất cả các lõi CPU
    verbose=2,
)

# Huấn luyện GridSearchCV
grid_search.fit(a_train, b_train)

# Kết quả
print("Best Parameters:", grid_search.best_params_)
print("Best Score (negative MSE):", grid_search.best_score_)

from sklearn.ensemble import ExtraTreesRegressor
# et_model = ExtraTreesRegressor(random_state =3, n_estimators = 50)
et_model = ExtraTreesRegressor( **grid_search.best_params_)
et_model.fit(a_train, b_train)

et_preds = et_model.predict(a_valid)
et_preds.shape

from sklearn.metrics import mean_squared_error, r2_score
print("RMSR ExtraTreesRegressor: %f" %np.sqrt(mean_squared_error(b_valid, et_preds)))
print("R2 ExtraTreesRegressor: %f %%" %(100*r2_score(b_valid, et_preds)))
standard_deviation = np.std(et_preds)
print(f"Standard Deviation of Predictions: {standard_deviation}")

data_extra = pd.DataFrame({"Tg": b_valid ,"ExtraTrees": et_preds})

plt.figure(figsize=(5,4), dpi=100)
plt.title("Model ExtraTreesRegressor")
sns.regplot(x=et_preds, y=b_valid, color='g')

plt.legend(loc='best', fontsize=12)

plt.xlabel("Predicted")
plt.ylabel("Pycalphad")

plt.tight_layout()
plt.show()

CuZr = pd.read_csv("CuZr_phase_diagram_input.csv")
Cu = CuZr['Cu']
CuZr = CuZr[features].values
CuZr

et_preds = et_model.predict(CuZr)
et_preds

data_extra = pd.DataFrame({"Cu": Cu,"ExtraTrees": et_preds})
data_extra.to_csv("Output_Tg_predicted_Ghorbani_(1)_(2).csv", index=False)

# from statsmodels.stats.weightstats import ttest_ind

# # Tính toán T-test độc lập
# t_stat, p_value, _ = ttest_ind(b_valid, et_preds)

# # Hiển thị kết quả
# print(f"T-test: T-stat = {t_stat:.4f}, P-value = {p_value:.4f}")

from sklearn.model_selection import cross_val_score
from sklearn.ensemble import ExtraTreesRegressor

# Khởi tạo model ExtraTrees
et_model = ExtraTreesRegressor(**grid_search.best_params_)

# Sử dụng 5-fold cross-validation
cv_scores = cross_val_score(et_model, a_train, b_train, cv=5, scoring='neg_mean_squared_error')
r2_scores = cross_val_score(et_model, a_train, b_train, cv=5, scoring='r2')

rmse_scores = np.sqrt(-cv_scores)
print("Cross-validation Scores (RMSE)", rmse_scores)  # Chuyển đổi negative MSE sang RMSE
print("Mean CV RMSE:", rmse_scores.mean())
print("Cross-validation Scores (R2)", r2_scores)  # Chuyển đổi negative MSE sang RMSE
print("Mean CV R2:", r2_scores.mean())

for n in range(1, 100, 1):
    a_train, a_valid, b_train, b_valid = train_test_split(a, b, test_size=0.2, random_state = n)
    b_train = np.ravel(b_train)
    b_valid = np.ravel(b_valid)

    from sklearn.ensemble import ExtraTreesRegressor
    et_model = ExtraTreesRegressor(random_state =2)
    et_model.fit(a_train, b_train)
    et_preds = et_model.predict(a_valid)

    from sklearn.metrics import mean_squared_error, r2_score
    print("n = %d, Error h1: RMSR : %f \tR2 : %f %%" %  (n, np.sqrt(mean_squared_error(b_valid, et_preds)),
          (100*r2_score(b_valid, et_preds))))