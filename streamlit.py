# -*- coding: utf-8 -*-
"""streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rpd-iISPiVhElvbU1a4TO64NP03BsfVO
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import joblib, re
# from mayavi import mlab
from pandas import DataFrame
from PIL import Image
import os
import shutil
from typing import Dict

# ================== CONFIG ================== #
FEATURES = [
    'Fe','Ni','Co','Cr','Hf','Sn','Zr','Ce','In','Ga','Gd','Si','Zn','Bi','Ti',
    'Mo','W','P','Pd','Ta','V','Nb','Sc','Al','Cu','La','Mg','Tb','Y','Be','Pr',
    'Er','Tm','Nd','B','Au','Ho','Ca','Dy','Mn','Ag','C'
]

TG_MODEL_PATH = "model_Tg_extratrees.pkl"
TM_MODEL_PATH = "model_Tm_extratrees.pkl"

# ================== UTILS ================== #
EL_PATTERN = re.compile(r"([A-Z][a-z]?)([0-9]*\.?[0-9]*)")

def parse_composition(text: str) -> Dict[str, float]:
    """Parse c√¥ng th·ª©c: Cu50Zr40Al10 | Cu:50,Zr:40,Al:10 ‚Üí dict {el: value}"""
    if not text: return {}
    cleaned = re.sub(r"[:=,;\\s-]+","",text.strip())
    parts = EL_PATTERN.findall(cleaned)
    if not parts:
        alt = re.findall(r"([A-Z][a-z]?)\\s*[:=]\\s*([0-9]+\\.?[0-9]*)", text)
        if not alt: raise ValueError("Kh√¥ng parse ƒë∆∞·ª£c c√¥ng th·ª©c.")
        parts = alt
    comp = {}
    for sym,num in parts:
        val = float(num) if num else 1.0
        comp[sym] = comp.get(sym,0.0)+val
    return comp

def normalize_to_percent(comp: Dict[str, float]) -> Dict[str, float]:
    s = sum(comp.values())
    return {k:v/s*100 for k,v in comp.items()} if s>0 else comp

def to_vector(comp: Dict[str, float]) -> np.ndarray:
    vec = np.zeros(len(FEATURES))
    for i,el in enumerate(FEATURES):
        vec[i] = comp.get(el,0.0)
    return vec.reshape(1,-1)

# ================== PREDICTOR ================== #
@st.cache_resource
def load_model(path: str):
    try:
        return joblib.load(path)
    except:
        return None

model_Tg = load_model(TG_MODEL_PATH)
model_Tm = load_model(TM_MODEL_PATH)

def predict_Tg(comp_pct: dict):
    if model_Tg is None: return None
    return float(model_Tg.predict(to_vector(comp_pct))[0])

def predict_Tm(comp_pct: dict):
    if model_Tm is None: return None
    return float(model_Tm.predict(to_vector(comp_pct))[0])

# ================== UI ================== #
st.set_page_config(page_title="Alloy Tg/Tm Predictor", page_icon="üß™", layout="wide")
st.title("üß™ Alloy Tg/Tm Predictor ‚Äî ExtraTrees")
st.caption("Nh·∫≠p c√¥ng th·ª©c h·ª£p kim (atomic %) ‚Üí d·ª± ƒëo√°n Tg, Tm")

mode = st.sidebar.radio("Input mode", ["Chu·ªói c√¥ng th·ª©c","Builder","Batch CSV"])
auto_norm = st.sidebar.checkbox("Chu·∫©n ho√° 100 at%", value=True)

# ---- Mode 1: Chu·ªói c√¥ng th·ª©c ----
if mode=="Chu·ªói c√¥ng th·ª©c":
    s = st.text_input("C√¥ng th·ª©c (vd: Cu50Zr40Al10)", value="Cu50Zr50")
    if st.button("üîÆ D·ª± ƒëo√°n (chu·ªói)"):
        try:
            comp_raw = parse_composition(s)
            unknown = [e for e in comp_raw if e not in FEATURES]
            if unknown: st.error(f"Nguy√™n t·ªë kh√¥ng h·ªó tr·ª£: {', '.join(unknown)}")
            else:
                comp_pct = normalize_to_percent(comp_raw) if auto_norm else comp_raw
                col1,col2=st.columns(2)
                tg = predict_Tg(comp_pct); tm = predict_Tm(comp_pct)
                with col1: st.metric("Tg (K)", f"{tg:.1f}" if tg else "N/A")
                with col2: st.metric("Tm (K)", f"{tm:.1f}" if tm else "N/A")
                st.dataframe(pd.DataFrame({"Element":list(comp_pct.keys()),"at%":list(comp_pct.values())})
                             .sort_values("Element").reset_index(drop=True))
        except Exception as e: st.error(str(e))

# ---- Mode 2: Builder ----
if mode=="Builder":
    picked = st.multiselect("Ch·ªçn nguy√™n t·ªë", FEATURES, default=["Cu","Zr"], max_selections=8)
    comp_inputs={}
    for el in picked:
        comp_inputs[el]=st.number_input(el,min_value=0.0,value=100.0/len(picked),step=0.5,key=f"n_{el}")
    go = st.button("üîÆ D·ª± ƒëo√°n (builder)")
    if go:
        comp_pct = normalize_to_percent(comp_inputs) if auto_norm else comp_inputs
        tg = predict_Tg(comp_pct); tm = predict_Tm(comp_pct)
        col1,col2=st.columns(2)
        with col1: st.metric("Tg (K)", f"{tg:.1f}" if tg else "N/A")
        with col2: st.metric("Tm (K)", f"{tm:.1f}" if tm else "N/A")
        st.dataframe(pd.DataFrame({"Element":list(comp_pct.keys()),"at%":list(comp_pct.values())})
                     .sort_values("Element").reset_index(drop=True))

# ---- Mode 3: Batch CSV ----
if mode=="Batch CSV":
    up = st.file_uploader("Upload CSV",type="csv")
    st.caption("CSV c√≥ c·ªôt `composition` (chu·ªói) ho·∫∑c 42 c·ªôt nguy√™n t·ªë.")
    if up:
        df = pd.read_csv(up)
        if "composition" in df.columns:
            rows=[]
            for s in df["composition"].astype(str):
                try: comp=normalize_to_percent(parse_composition(s)); rows.append(to_vector(comp).reshape(-1))
                except: rows.append(np.zeros(len(FEATURES)))
            X=np.vstack(rows)
            out=pd.DataFrame({"composition":df["composition"]})
        else:
            for el in FEATURES:
                if el not in df.columns: df[el]=0.0
            X=df[FEATURES].fillna(0.0).to_numpy(float)
            out=pd.DataFrame()
        if model_Tg: out["Tg_pred"]=model_Tg.predict(X)
        if model_Tm: out["Tm_pred"]=model_Tm.predict(X)
        st.dataframe(out.head())
        st.download_button("Download CSV",out.to_csv(index=False),"predictions.csv")

# ---- Phase curve ----
st.divider()
st.subheader("Phase curve (A‚ÄìB)")
colA,colB,colStep=st.columns([1,1,1])
elA=colA.selectbox("Element A",FEATURES,index=FEATURES.index("Cu"))
elB=colB.selectbox("Element B",FEATURES,index=FEATURES.index("Zr"))
step=colStep.number_input("Step %",1,20,5)
if st.button("Generate Phase Curve"):
    xs,rows=[],[]
    for a in range(0,101,int(step)):
        comp={elA:a,elB:100-a}
        xs.append(a); rows.append(to_vector(comp).reshape(-1))
    X=np.vstack(rows)
    out=pd.DataFrame({f"{elA}_at%":xs})
    if model_Tg: out["Tg_pred"]=model_Tg.predict(X)
    if model_Tm: out["Tm_pred"]=model_Tm.predict(X)
    st.dataframe(out.head())
    fig,ax=plt.subplots()
    if "Tg_pred" in out: ax.plot(out[f"{elA}_at%"],out["Tg_pred"],label="Tg")
    if "Tm_pred" in out: ax.plot(out[f"{elA}_at%"],out["Tm_pred"],label="Tm")
    ax.set_xlabel(f"{elA} at% (B=100‚àíA)"); ax.set_ylabel("Temperature (K)")
    ax.legend(); ax.grid(True,alpha=0.3); st.pyplot(fig)
